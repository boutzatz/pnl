# -*- mode: Makefile -*-
# vim: set filetype=make:


########################################################################
# Written and (C) by Jérôme Lelong <jerome.lelong@gmail.com>           #
#                                                                      #
# This program is free software; you can redistribute it and/or modify #
# it under the terms of the GNU Lesser General Public License as       #
# published by  the Free Software Foundation; either version 3 of the  #
# License, or (at your option) any later version.                      #
#                                                                      #
# This program is distributed in the hope that it will be useful,      #
# but WITHOUT ANY WARRANTY; without even the implied warranty of       #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        #
# GNU Lesser General Public License for more details.                  #
#                                                                      #
# You should have received a copy of the GNU Lesser General Public     #
# License  along with this program.  If not, see                       #
# <http://www.gnu.org/licenses/>.                                      #
########################################################################


# 
# A few variables fixed by the configure script
#
LIBPNLDIR = @LIBPNLDIR@
includedir=@includedir@
libdir=@libdir@
top_builddir = $(LIBPNLDIR)/@top_builddir@
top_srcdir = $(LIBPNLDIR)/@top_srcdir@
CC = @CC@
AM_CFLAGS = @AM_CFLAGS@
SHELL = @SHELL@
LIBTOOL = @LIBTOOL@
MPI_CFLAGS=@MPI_CFLAGS@
LN_S = @LN_S@
INCLUDES = -I$(includedir)/pnl  -I$(includedir) $(MPI_CFLAGS)
OTHERLIBS = -L$(libdir) -lpnl -lm @LDFLAGS@ @BLAS_LIBS@ @LAPACK_LIBS@ @LAPACK_STATIC_LIBS@ @BLAS_STATIC_LIBS@

QUIET=--quiet

#
# Compiling directives
#
COMPILE = $(CC) $(INCLUDES) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CXXCOMPILE = $(CXX) $(INCLUDES) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile --tag=CC $(QUIET) $(CC) $(INCLUDES)  $(AM_CFLAGS) $(CFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --mode=compile --tag=CXX $(QUIET) $(CXX) $(INCLUDES)  $(AM_CFLAGS) $(CXXFLAGS)

CLINK = $(LIBTOOL) --mode=link --tag=CC $(QUIET) $(CC) $(CFLAGS) $(LDFLAGS) $(OTHERLIBS)
CXXLINK = $(LIBTOOL) --mode=link --tag=CXX $(QUIET) $(CXX) $(LDFLAGS) $(OTHERLIBS)

#*******************************************************************

## Creates targets. A target is created by linking the objects defined
## by $(target_SRC) with extensions replaced by .lo
define new_target 
		# 1: name of the binary to be created
local_bin=$(subst -,_,$(1))
LOBJS=$$($$(local_bin)_OBJS)
LSRC=$$($$(local_bin)_SRC)
local_LDFLAGS=$$($$(local_bin)_LDFLAGS)
local_CFLAGS=$$($$(local_bin)_CFLAGS)
local_CXXFLAGS=$$($$(local_bin)_CXXFLAGS)
ifneq ($(strip $$(LSRC)),)
  LOBJS_1=$${LSRC:%.cc=%.o}
  LOBJS_2=$${LOBJS_1:%.C=%.o}
  LOBJS_3=$${LOBJS_2:%.c=%.o}
  LOBJS_4=$${LOBJS_3:%.cpp=%.o}
  LOBJS_5=$${LOBJS_4:%.cxx=%.o}
  LOBJS=$$(LOBJS_5)
  $$(foreach src,$$(LSRC),$$(eval $$(call create_rule_lo,$$(src),$$(local_CFLAGS),$$(local_CXXFLAGS) )))
  LOBJS_LT=$${LOBJS:%.o=%.lo}
  # Decide between a C or C++ linker
  ifeq ($(strip $$(filter-out %.c,$$(LSRC))),)
    $$(eval $$(call create_rule_bin_c,$(1),$$(LOBJS_LT),$$(local_LDFLAGS)))
  else
    $$(eval $$(call create_rule_bin_cpp,$(1),$$(LOBJS_LT),$$(local_LDFLAGS)))
  endif
else
  LOBJS_LT=$${LOBJS:%.o=%.lo}
  $$(eval $$(call create_rule_bin_c,$(1),$$(LOBJS_LT),$$(local_LDFLAGS)))
endif
endef


# Write the rule to create a given binary using only C objects
define create_rule_bin_c
		# 1: target name 
		# 2: libtool objects 
		# 3: per target ldflags
$(1): $(2)
	$(CLINK) $(3) -o $$@ $$^ 
endef

# Write the rule to create a given binary using C/C++ objects
define create_rule_bin_cpp
		# 1: target name 
		# 2: libtool objects 
		# 3: per target ldflags
$(1): $(2)
	$(CXXLINK) $(3) -o $$@ $$^ 
endef


# Write the rules to create objects
# Each time a new rule is defined to create an object of basename base
# the variable base_rule is defined to ensure that we won't try to redefine
# the same rule later in case an object appears in several binaries.
define create_rule_lo 
		# 1: name of the src file used to generate the .o
		# 2 : per target CFLAGS
		# 3 : per target CXXFLAGS
base=$(basename $(1))
ifndef $$(base)_rule
  $$(base)_rule=1
  base_o=$$(base).o
  base_lo=$$(base).lo
  ifeq ($(suffix $(1)),.c)
    $$(base_lo): $(1)
		$(LTCOMPILE) $(2)  -o $$@ -c $$<
    $$(base_o): $(deps)
		$(COMPILE)  $(2) -o $$@ -c $$<
  else
    $$(base_lo): $(1)
		$(LTCXXCOMPILE) $(3) -o $$@  -c $$<
    $$(base_o): $(1)
		$(CXXCOMPILE) $(3) -o $$@  -c $$<
  endif
endif
endef

all: $(BINS)


# Go through BINS and generate all the necessary rules
$(foreach target,$(BINS),$(eval $(call new_target,$(target))))

clean::
	$(RM) *.o *.lo
	$(RM) -r .libs

cleanall:: clean
	$(RM) $(BINS)


# Add some generic rules for target usings the _OBJS mechanism
# Will become deprecated 
%.o: %.c
	$(COMPILE)  -o $@ -c $<
%.lo:%.c
	$(LTCOMPILE) -o $@ -c $<

%.o:%.cpp
	$(CXXCOMPILE)  -o $@ -c $<
%.lo:%.cpp
	$(LTCXXCOMPILE) -o $@ -c $<

%.o:%.C
	$(CXXCOMPILE) -o $@  -c $<
%.lo :%.C
	$(LTCXXCOMPILE) -o $@ -c $<

%.o:%.cc
	$(CXXCOMPILE) -o $@  -c $<
%.lo :%.cc
	$(LTCXXCOMPILE) -o $@ -c $<

%.o:%.cxx
	$(CXXCOMPILE) -o $@  -c $<
%.lo :%.cxx
	$(LTCXXCOMPILE) -o $@ -c $<

